import colorsys
import math


def calculate_luminace(normalized_value):
    index = normalized_value

    if index < 0.03928:
        return index / 12.92
    else:
        return ((index + 0.055) / 1.055) ** 2.4


def calculate_relative_luminance(r, g, b):
    return 0.2126 * calculate_luminace(r) + 0.7152 * calculate_luminace(g) + 0.0722 * calculate_luminace(b)


def calculate_contrast_ratio(color: tuple[float, float, float], otherColor: tuple[float, float, float]):
    l1 = calculate_relative_luminance(*color)
    l2 = calculate_relative_luminance(*otherColor)
    return (l1 + 0.05) / (l2 + 0.05) if l1 > l2 else (l2 + 0.05) / (l1 + 0.05)


def rad(degrees: float):
    return degrees / 180 * math.pi


def rgbToHex(r: float, g: float, b: float):
    rs = hex(math.floor(r * 255))[2:].zfill(2)
    gs = hex(math.floor(g * 255))[2:].zfill(2)
    bs = hex(math.floor(b * 255))[2:].zfill(2)

    return rs + gs + bs


def generateColors(backgroundColor: tuple[float, float, float], targetContrast: float, hueOffset=0, numberOfColors=16, saturation=0.2, initialBrightness=1.0, brightnessStep=-.05, totalTrials=5):
    colorContrastList: list[tuple[tuple[float, float, float], float]] = list()

    unitHue = 1 / numberOfColors

    for i in range(numberOfColors):
        hue = (hueOffset + unitHue * i) % 1.0

        r, g, b = colorsys.hsv_to_rgb(hue, saturation, initialBrightness)

        trials = totalTrials
        contrast = calculate_contrast_ratio(backgroundColor, (r, g, b))

        while contrast < targetContrast and trials > 0:
            trials -= 1
            r, g, b = colorsys.hsv_to_rgb(
                hue, saturation, initialBrightness + (brightnessStep * (totalTrials - trials)))
            contrast = calculate_contrast_ratio(backgroundColor, (r, g, b))

        colorContrastList.append(((r, g, b), contrast))

    return colorContrastList


with open("primary_colors.dart", "w") as output_file:
    print("// Auto-generated by colors.py", file=output_file)
    print("", file=output_file)
    print("import 'dart:ui';", file=output_file)
    print("", file=output_file)

    accentColors: list[tuple[tuple[float, float, float], float]] = list()
    primaryColors: list[tuple[tuple[float, float, float], float]] = list()

    bg = 0xf5 / 255.0, 0xf6 / 255.0, 0xfa / 255.0

    for [color, contrast] in generateColors(bg, 1.0, saturation=0.2, initialBrightness=1.0, totalTrials=0, hueOffset=0.80196078431):
        hexColor = rgbToHex(*color)
        accentColors.append([color, 0.0])
        [colorH, colorS, colorV] = colorsys.rgb_to_hsv(*color)
        [secondaryColor, secondaryContrast] = generateColors(
            color, 5.0, saturation=1.0, initialBrightness=0.65, hueOffset=colorH, brightnessStep=-0.033)[0]
        primaryColors.append([secondaryColor, secondaryContrast])

    print("const accentColors = [", file=output_file)
    for [accentColor, constrast] in accentColors:
        contrastText = "" if constrast == 0 else f" // contrast ratio {contrast}"
        print(
            f"  Color(0xff{rgbToHex(*accentColor)}),{contrastText}", file=output_file)
    print("];", file=output_file)
    print("", file=output_file)
    print("const primaryColors = [", file=output_file)
    for [primaryColor, pContrast] in primaryColors:
        pcontrastText = "" if pContrast == 0 else f" // contrast ratio {pContrast}"
        print(
            f"  Color(0xff{rgbToHex(*primaryColor)}),{pcontrastText}", file=output_file)
    print("];", file=output_file)
